// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
package ldc

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"strconv"
	"strings"
)

//line parser.y:10
type yySymType struct {
	yys int
	s   string
	c   int
}

const PR_FUNC = 57346
const UNARY_SUB = 57347
const AND = 57348
const EXPONENTATION = 57349
const GE = 57350
const LE = 57351
const MOD = 57352
const NE = 57353
const NEW_LINE = 57354
const NOT = 57355
const OR = 57356
const XOR = 57357
const Identifier = 57358
const Integer = 57359
const String = 57360

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"PR_FUNC",
	"UNARY_SUB",
	"AND",
	"EXPONENTATION",
	"GE",
	"LE",
	"MOD",
	"NE",
	"NEW_LINE",
	"NOT",
	"OR",
	"XOR",
	"Identifier",
	"Integer",
	"String",
	"','",
	"'='",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'('",
	"'.'",
	"'['",
	"';'",
	"')'",
	"']'",
	"'?'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:97

var (
	r   []string
	ens map[string]bool
)

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 63,
	8, 0,
	9, 0,
	11, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 28,
	-1, 64,
	8, 0,
	9, 0,
	11, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 29,
	-1, 65,
	8, 0,
	9, 0,
	11, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 30,
	-1, 66,
	8, 0,
	9, 0,
	11, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 31,
	-1, 67,
	8, 0,
	9, 0,
	11, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 32,
	-1, 68,
	8, 0,
	9, 0,
	11, 0,
	20, 0,
	21, 0,
	22, 0,
	-2, 33,
}

const yyPrivate = 57344

const yyLast = 176

var yyAct = [...]int{

	20, 7, 19, 78, 26, 50, 12, 21, 22, 23,
	14, 32, 29, 58, 15, 27, 77, 29, 25, 12,
	32, 18, 13, 79, 24, 55, 51, 52, 53, 2,
	28, 30, 31, 56, 57, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 6, 8, 75, 1, 8, 12, 8, 35, 49,
	42, 43, 46, 39, 0, 9, 36, 37, 9, 5,
	9, 11, 38, 40, 41, 47, 48, 44, 45, 80,
	33, 34, 0, 76, 35, 49, 42, 43, 46, 39,
	0, 3, 36, 37, 10, 0, 0, 49, 38, 40,
	41, 47, 48, 44, 45, 4, 33, 34, 35, 49,
	8, 0, 46, 16, 0, 17, 36, 37, 33, 34,
	35, 49, 17, 9, 46, 47, 48, 44, 45, 37,
	33, 34, 35, 49, 0, 54, 46, 47, 48, 44,
	45, 49, 33, 34, 46, 0, 0, 0, 0, 47,
	48, 44, 45, 49, 33, 34, 46, 47, 48, 44,
	45, 0, 33, 34, 0, 0, 0, 0, 0, 0,
	0, 44, 45, 0, 33, 34,
}
var yyPact = [...]int{

	39, -1000, 39, -1000, 41, 10, -1000, -1000, -17, 94,
	-1000, 9, -1000, -1000, -9, -2, 36, 36, -1000, 1,
	78, -22, -1000, -1000, -1000, -9, -9, -9, -1000, 36,
	-7, -1000, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, 52, 90, 90, 36, -1000, 78, -1000, -16, 78,
	134, 114, 126, 102, 102, 102, 102, 102, 102, 90,
	90, 90, 146, 146, 90, -8, -1000, -1000, -9, -1000,
	78,
}
var yyPgo = [...]int{

	0, 54, 29, 91, 105, 1, 2, 14, 0, 13,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 4, 4, 5,
	5, 5, 7, 7, 6, 6, 6, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 9, 9,
}
var yyR2 = [...]int{

	0, 1, 1, 2, 3, 2, 1, 1, 2, 4,
	3, 4, 1, 3, 0, 1, 3, 1, 1, 1,
	1, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 1, 3,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, 30, 12, -5, 16, 29,
	-3, 30, -5, 12, 27, -7, 19, -4, 12, -6,
	-8, 16, 17, 18, 33, 27, 13, 24, 32, 19,
	-7, 31, 19, 28, 29, 6, 14, 15, 20, 11,
	21, 22, 8, 9, 25, 26, 10, 23, 24, 7,
	27, -8, -8, -8, -4, 32, -8, -8, -9, -8,
	-8, -8, -8, -8, -8, -8, -8, -8, -8, -8,
	-8, -8, -8, -8, -8, -6, 31, 32, 19, 31,
	-8,
}
var yyDef = [...]int{

	0, -2, 1, 2, 0, 0, 6, 7, 0, 0,
	3, 0, 8, 5, 14, 0, 0, 12, 4, 0,
	15, 17, 18, 19, 20, 0, 0, 0, 10, 0,
	0, 9, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	14, 0, 40, 41, 13, 11, 16, 22, 0, 42,
	25, 26, 27, -2, -2, -2, -2, -2, -2, 34,
	35, 36, 37, 38, 39, 0, 23, 24, 0, 21,
	43,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	27, 31, 25, 23, 19, 24, 28, 26, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 30,
	22, 20, 21, 33, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 29, 3, 32,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:38
		{
			if yyDollar[1].s != "" {
				r = append(r, yyDollar[1].s)
			}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:44
		{
			if yyDollar[2].s != "" {
				r = append(r, yyDollar[2].s)
			}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:51
		{
			yyVAL.s = ""
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:52
		{
			yyVAL.s = ""
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:55
		{
			yyVAL.s = yyDollar[1].s + ";\n" + yyDollar[2].s
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:57
		{
			yyVAL.s = "EN := LD_" + yyDollar[1].s + "(EN, " + yyDollar[3].s + ")"
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:58
		{
			yyVAL.s = brPrefix(yyDollar[2].c) + yyDollar[2].s + ";\n" + brSuffix(yyDollar[2].c)
			regEN(yyDollar[2].s)
		}
	case 11:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:59
		{
			yyVAL.s = brPrefix(yyDollar[3].c) + yyDollar[3].s + ";\n" + brSuffix(yyDollar[3].c)
			regEN(yyDollar[2].s)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:61
		{
			yyVAL.s = strings.ReplaceAll(yyDollar[1].s, "EN", "EN1")
			yyVAL.c = 1
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:62
		{
			yyVAL.c = yyDollar[1].c + (yyDollar[3].c | 1)
			yyVAL.s = yyDollar[1].s + ";\n" + strings.ReplaceAll(yyDollar[3].s, "EN", "EN"+strconv.Itoa(yyVAL.c))
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:66
		{
			yyVAL.s = yyDollar[1].s + ", " + yyDollar[3].s
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:71
		{
			yyVAL.s = "null"
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:72
		{
			yyVAL.s = yyDollar[1].s + "(" + yyDollar[3].s + ")"
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:73
		{
			yyVAL.s = yyDollar[1].s + "." + yyDollar[3].s
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:74
		{
			yyVAL.s = "(" + yyDollar[2].s + ")"
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:75
		{
			yyVAL.s = yyDollar[1].s + "[" + yyDollar[3].s + "]"
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:76
		{
			yyVAL.s = "(" + yyDollar[1].s + " AND " + yyDollar[3].s + ")"
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:77
		{
			yyVAL.s = "(" + yyDollar[1].s + " OR " + yyDollar[3].s + ")"
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:78
		{
			yyVAL.s = "(" + yyDollar[1].s + " XOR " + yyDollar[3].s + ")"
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:79
		{
			yyVAL.s = "(" + yyDollar[1].s + " = " + yyDollar[3].s + ")"
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:80
		{
			yyVAL.s = "(" + yyDollar[1].s + " <> " + yyDollar[3].s + ")"
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:81
		{
			yyVAL.s = "(" + yyDollar[1].s + " > " + yyDollar[3].s + ")"
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:82
		{
			yyVAL.s = "(" + yyDollar[1].s + " < " + yyDollar[3].s + ")"
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:83
		{
			yyVAL.s = "(" + yyDollar[1].s + " >= " + yyDollar[3].s + ")"
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:84
		{
			yyVAL.s = "(" + yyDollar[1].s + " <= " + yyDollar[3].s + ")"
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:85
		{
			yyVAL.s = "(" + yyDollar[1].s + " * " + yyDollar[3].s + ")"
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:86
		{
			yyVAL.s = "(" + yyDollar[1].s + " / " + yyDollar[3].s + ")"
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:87
		{
			yyVAL.s = "(" + yyDollar[1].s + " MOD " + yyDollar[3].s + ")"
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:88
		{
			yyVAL.s = "(" + yyDollar[1].s + " + " + yyDollar[3].s + ")"
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:89
		{
			yyVAL.s = "(" + yyDollar[1].s + " - " + yyDollar[3].s + ")"
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:90
		{
			yyVAL.s = "(" + yyDollar[1].s + " ** " + yyDollar[3].s + ")"
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:91
		{
			yyVAL.s = "NOT " + yyDollar[2].s
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:92
		{
			yyVAL.s = "-" + yyDollar[2].s
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:95
		{
			yyVAL.s = yyDollar[1].s + "][" + yyDollar[3].s
		}
	}
	goto yystack /* stack new state and value */
}
