/[ \r\t]/  { /* Skip blanks and tabs. */ }
/,/    { return ',' }
/-/    { return '-' }
/;/    { return ';' }
/</    { return '<' }
/<=/   { return LE }
/<>/   { return NE }
/=/    { return '=' }
/>/    { return '>' }
/>=/   { return GE }
/AND/  { return AND }
/MOD/  { return MOD }
/NOT/  { return NOT }
/OR/   { return OR }
/XOR/  { return XOR }
/\(/   { return '('  }
/\)/   { return ')' }
/\*/   { return '*' }
/\*\*/ { return EXPONENTATION }
/\+/   { return '+' }
/\./   { return '.' }
/\//   { return '/' }
/\?/   { return '?' }
/\[/   { return '[' }
/\]/   { return ']' }
/\n/   { return NEW_LINE }
/[0-9]*/                 { lval.s = yylex.Text(); return Integer }
/[A-Za-z][A-Za-z0-9_:]*/ { lval.s = yylex.Text(); return Identifier }
/'[^'\n]*'/ { lval.s = yylex.Text(); return String }
//

package ldc

import (
	"fmt"
)

var lexErr string

func (yylex Lexer) Error(e string) {
	lexErr = fmt.Sprintf("line %d column %d: %s, found %q\n", yylex.Line()+1, yylex.Column(), e, yylex.Text())
}

